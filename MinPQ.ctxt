#BlueJ class context
comment0.params=initCapacity
comment0.target=MinPQ(int)
comment0.text=\r\n\ Initializes\ an\ empty\ priority\ queue\ with\ the\ given\ initial\ capacity.\r\n\r\n\ @param\ \ initCapacity\ the\ initial\ capacity\ of\ this\ priority\ queue\r\n
comment1.params=
comment1.target=MinPQ()
comment1.text=\r\n\ Initializes\ an\ empty\ priority\ queue.\r\n
comment10.params=
comment10.target=java.lang.Object\ delMin()
comment10.text=\r\n\ Removes\ and\ returns\ a\ smallest\ key\ on\ this\ priority\ queue.\r\n\r\n\ @return\ a\ smallest\ key\ on\ this\ priority\ queue\r\n\ @throws\ NoSuchElementException\ if\ this\ priority\ queue\ is\ empty\r\n
comment11.params=k
comment11.target=void\ swim(int)
comment11.text=\r\n\ Helper\ functions\ to\ restore\ the\ heap\ invariant.\r\n
comment12.params=k
comment12.target=void\ sink(int)
comment13.params=i\ j
comment13.target=boolean\ greater(int,\ int)
comment13.text=\r\n\ Helper\ functions\ for\ compares\ and\ swaps.\r\n
comment14.params=i\ j
comment14.target=void\ exch(int,\ int)
comment15.params=
comment15.target=boolean\ isMinHeap()
comment16.params=k
comment16.target=boolean\ isMinHeap(int)
comment17.params=
comment17.target=java.util.Iterator\ iterator()
comment17.text=\r\n\ Returns\ an\ iterator\ that\ iterates\ over\ the\ keys\ on\ this\ priority\ queue\r\n\ in\ ascending\ order.\r\n\ <p>\r\n\ The\ iterator\ doesn't\ implement\ {@code\ remove()}\ since\ it's\ optional.\r\n\r\n\ @return\ an\ iterator\ that\ iterates\ over\ the\ keys\ in\ ascending\ order\r\n
comment18.params=args
comment18.target=void\ main(java.lang.String[])
comment18.text=\r\n\ Unit\ tests\ the\ {@code\ MinPQ}\ data\ type.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
comment2.params=initCapacity\ comparator
comment2.target=MinPQ(int,\ java.util.Comparator)
comment2.text=\r\n\ Initializes\ an\ empty\ priority\ queue\ with\ the\ given\ initial\ capacity,\r\n\ using\ the\ given\ comparator.\r\n\r\n\ @param\ \ initCapacity\ the\ initial\ capacity\ of\ this\ priority\ queue\r\n\ @param\ \ comparator\ the\ order\ to\ use\ when\ comparing\ keys\r\n
comment3.params=comparator
comment3.target=MinPQ(java.util.Comparator)
comment3.text=\r\n\ Initializes\ an\ empty\ priority\ queue\ using\ the\ given\ comparator.\r\n\r\n\ @param\ \ comparator\ the\ order\ to\ use\ when\ comparing\ keys\r\n
comment4.params=keys
comment4.target=MinPQ(java.lang.Object[])
comment4.text=\r\n\ Initializes\ a\ priority\ queue\ from\ the\ array\ of\ keys.\r\n\ <p>\r\n\ Takes\ time\ proportional\ to\ the\ number\ of\ keys,\ using\ sink-based\ heap\ construction.\r\n\r\n\ @param\ \ keys\ the\ array\ of\ keys\r\n
comment5.params=
comment5.target=boolean\ isEmpty()
comment5.text=\r\n\ Returns\ true\ if\ this\ priority\ queue\ is\ empty.\r\n\r\n\ @return\ {@code\ true}\ if\ this\ priority\ queue\ is\ empty;\r\n\ \ \ \ \ \ \ \ \ {@code\ false}\ otherwise\r\n
comment6.params=
comment6.target=int\ size()
comment6.text=\r\n\ Returns\ the\ number\ of\ keys\ on\ this\ priority\ queue.\r\n\r\n\ @return\ the\ number\ of\ keys\ on\ this\ priority\ queue\r\n
comment7.params=
comment7.target=java.lang.Object\ min()
comment7.text=\r\n\ Returns\ a\ smallest\ key\ on\ this\ priority\ queue.\r\n\r\n\ @return\ a\ smallest\ key\ on\ this\ priority\ queue\r\n\ @throws\ NoSuchElementException\ if\ this\ priority\ queue\ is\ empty\r\n
comment8.params=capacity
comment8.target=void\ resize(int)
comment9.params=x
comment9.target=void\ insert(java.lang.Object)
comment9.text=\r\n\ Adds\ a\ new\ key\ to\ this\ priority\ queue.\r\n\r\n\ @param\ \ x\ the\ key\ to\ add\ to\ this\ priority\ queue\r\n
numComments=19
